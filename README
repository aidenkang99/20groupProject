Program: Kahoot with Eyegaze™
Programmers: Aiden Kang, Jolie Davidson, and Mikayla Clark
Date: Nov 15, 2019

Program Explanation:

    Just like the famous program, Kahoot, we are building a system where
    users can take a quiz, survey, or poll. However, users won't be clicking
    options; they would only be gazing at an option they want to select.

    Users would have an enough time to read the question and options and have
    time to think. After that, we will give users several seconds to just gaze at
    the option they have selected.

    We are planning to implement this by recording the x, y coordinates of their
    gaze and average them to reduce the noise of data. 

    Since the four quadrants that would represent each option would be big enough
    to distinguish each gaze, we believe the result would be quite accurate.

    It would make the interactions with the system much easier.


Feasibility Test:

    Our program changes the colors of left/right grid based on user's gaze.
    We tried to show that we know how to use webgazer to detect user's movements
    on screen and can associate that event with changes in the website.

Link to the Interactive XD Prototype:

    https://xd.adobe.com/view/336be162-e462-4a4c-672a-048c6bc6f2c7-455a/

Technology Requirement/Risks:

    We are using webgazer.js for our project, as well as Javascript, HTML, and CSS.

    Webgazer seems pretty straightforward and easy to use, as long as the user is
    aware of how to calibrate it; this might require some more explicit instructions
    on our part.
    
    Also, because it’s not extremely accurate, we will have to keep in mind that
    the user’s “gaze” might end up in quadrants they didn’t intend. We want near
    100% accuracy, so it will take some testing to ensure the program’s
    user-friendly.

    It seems to be that lighting is very important when the API tries to compute
    the location of user's gaze. So if you feel like the result is not accurate,
    try to change the lighting or switch the position of your laptop.
    Then, instantly, the result often becomes more accurate.

    Aiden and Mikayla have prior experience with Javascript, HTML, and CSS from COMP
    20 projects; Jolie, however, is new to these languages and is excited to embrace
    the learning curve.
    
    She’s currently slightly confused about how to place the quadrant objects so they
    meet directly in the middle, because as of now she had to physically code the
    squares to be half the screen width minus 5 more pixels, and when the browser
    is resized, the quadrants overlap instead of just getting smaller.

    We are also discussing exactly how the program will register the user’s final
    choice; we plan to have a point where the user is told to stare directly at their
    vote, but they know that the gaze might also point at other quadrants.
    
    We’ve discussed adding up all the coordinates together taken over a period of time
    and dividing the total value by the number of coordinates taken to get an average
    point; we also might store them in an array and find the average at the end.

    Besides that, we’re excited to see where this project takes us!

Design Documentation:

1) Inheritance hierarchy (IS-A)

    Calibration

    Coordinate
        - c
        - totalPos

    Timer
        - t1

    squarePos
        - topLeft
        - topRight
        - bottomLeft
        - bottomRight

    Data
        - thisD
    
    MessageBar
        - messageBar

    Question
        - questionsList[]    

    Square 
        - squares[]

2) Aggregation hierarchy (HAS-A)

    Canvas
        - Calibration
        - GameScreen
            - Square
                - Text
                - BackgroundColor (HEX value)
                - Location
                - BorderColor (HEX value)
                - Height and width
            - Data
            - Timer
            - Coordinate
            - Question
            - MessageBar


3) Collaboration Relationships (USES)

    GameScreen uses the array values from Question to create Question objects.
    Then, GameScreen uses array values from Square to create Square objects.
    Coordinate uses values passed in by GameScreen to compute the coordinate 
    value. squarePos gets the information passed in by GameScreen to create
    squarePos objects. Timer uses the values passed in by GameScreen to create 
    a Timer. Data also uses values passed in by GameScreen to create a Data 
    object. 

4) Encapsulation
    - The use of Webgazer.js inherently makes how computing eyegaze works
        very encapsulated.
    - When I locate each NumberWidget, I wouldn't have to consider how each
        NumberWidgets operate
    

Good Aspects of our UI Design:

All in all, we've created a good UI design. At first, we tried to eliminate potential 
user difficulty by trying to get the mouse to click on its own for calibration. This 
ended up not working out, but the calibration still works great, and is very intuitive 
given our directions. The question box at the top of the screen and the message bar at 
the bottom of the screen has a white background color, which provides some eye relief 
for the user. In between each question, there is a "eye break" time, where the user is 
able to rest their eyes for up to 7 seconds. This is crucial to the user's experience 
while playing this game, because if their eyes were being used for the entirety of the 
game at all times, they would strain their eyes. Therefore, this relief period is necessary. 

The question is at the top of the screen so the user can easily read the question. 
The answer boxes are divided up into four sections, and this section takes up most of
the screen for two reasons. One reason is for accuracy and precision of the answers 
recorded from the eye gazing. More surface area available to collect data makes the 
interface more accurate. The other reason is so that the user can see the choices easily 
and reduce strain on their eyes. The messages displayed to the user to communicate the 
status of the game, the timer, and the user's score, is at the bottom of the screen. 
This allows the user to completely rest their eyes during the break period, since the 
rest of the screen fades during this period. 
    

